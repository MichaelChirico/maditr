% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/columns.R
\name{columns}
\alias{columns}
\alias{rows}
\title{Selects columns from the data set}
\usage{
columns(data, ...)

rows(data, ...)
}
\arguments{
\item{data}{data.table/data.frame data.frame will be automatically converted
to data.table.}

\item{...}{List of variables or name-value pairs of summary/modifications
functions. The name will be the name of the variable in the result.
Advantages of \verb{:=} are multiassignment (\code{c("a", "b") := list(1,2)})
and parametric assignment (\code{(a) := 2})}
}
\value{
data.table
}
\description{
Variable ranges are supported, e. g. vs:carb. Alternatively, you can use
\verb{\%to\%} instead of colon: \code{vs \%to\% carb}. Characters which start with '^' or
end with '$' considered as Perl-style regular expression patterns. For
example, '^Petal' returns all variables started with 'Petal'. 'Width$'
returns all variables which end with 'Width'. Pattern '^.' matches all
variables and pattern '^.*my_str' is equivalent to 'contains "my_str"'. See
examples.
}
\examples{
mtcars \%>\%
    columns(vs:carb, cyl)
mtcars \%>\%
    columns(-am, -cyl)

# regular expression pattern
columns(iris, "^Petal") # variables which start from 'Petal'
columns(iris, "Width$") # variables which end with 'Width'
# move Species variable to the front.
# pattern "^." matches all variables
columns(iris, Species, "^.")
# pattern "^.*i" means "contains 'i'"
columns(iris, "^.*i")
columns(iris, 1:4) # numeric indexing - all variables except Species

# variable expansion
dims = c("Width", "Length")
columns(iris, "Petal.{dims}")

}
